name: EC2 Auto Deploy

on: push  # main 브랜치에 푸시될 때만 트리거

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      # 리포지토리 클론
      - name: Checkout code
        uses: actions/checkout@v4

      # Python 환경 세팅 (필요한 경우)
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 도커 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t iris-inference:latest .

      # Docker Hub 로그인
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      # 도커 이미지 태그 및 Docker Hub에 푸시
      - name: Push Docker image to Docker Hub
        run: |
          docker tag myapp:latest ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

      # SSH를 이용해 EC2 서버로 배포
      - name: Deploy to EC2 via SSH
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_KEY }}
        run: |
          echo "$EC2_KEY" > ec2_key.pem
          chmod 600 ec2_key.pem

          # EC2에 접속하여 기존 컨테이너 중지 및 새 도커 이미지 실행
          ssh -i ec2_key.pem -o StrictHostKeyChecking=no $EC2_USER@$EC2_HOST << 'EOF'
            # 기존 컨테이너 중지 및 삭제
            docker stop myapp || true
            docker rm myapp || true

            # Docker Hub에서 최신 이미지 가져오기
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest

            # 새 이미지를 기반으로 컨테이너 실행
            docker run -d --name myapp -p 80:80 ${{ secrets.DOCKER_HUB_USERNAME }}/myapp:latest
          EOF
